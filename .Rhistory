## ...
## where 'id' is the monitor ID number and 'nobs' is the number of complete cases
## dependencies
## directory <- "/Users/mistermaxx/Documents/work/personal/Coursera/R Programming/Week 2/"
## library(stringr) for str_pad
library(stringr)
complete <- function(directory, id = 1:332)
{
## init variables
## create the return data frame
observations <- data.frame("id"=numeric(),"nobs"=numeric())
## outer loop: iterate through all the files specified by id
##for(i in id)
for(i in seq_along(id))
{
## concatenate file path using paste()
file <- paste("/",str_pad(id[i], 3, pad = "0"),".csv", sep = "")
wrkdirpath <- "/Users/mistermaxx/Documents/work/personal/Coursera/R Programming/Week 2/"
path <- paste(wrkdirpath, directory, file, sep = "")
print(path)
## read in the data, filter
temp_table <- read.csv(path)
filter <- complete.cases(temp_table)
print(nrow(temp_table[filter,]))
temp_obs <-nrow(temp_table[filter,])
##print(temp_table[filter,])
print(c(id[i], temp_obs))
temp_vector <- c(id[i], temp_obs)
##colnames(temp_vector) <- c("id","nobs")
observations <- rbind(observations, temp_vector)
## loop through data frame; note usage of nrow to get the number of rows in the data
##for(z in 1:nrow(temp_table))
##{
##  print(temp_table[z,])
## is observation complete (values in both columns?)
##}
}
return(observations)
}
complete("specdata", 1)
library(datasets)
data(iris)
summary(irs)
summary(iris)
head(iris)
sepal_length <- iris$Sepal.Length[iris$Species=="virginica"]
sapply(sepal_length,mean)
sepal_length
value <- sapply(sepal_length, mean)
value
iris.dataframe <- iris[iris$Species, ]
iris.dataframe
iris.dataframe <- iris[iris$Species=="virginica", ]
iris.dataframe
iris.dataframe <- iris[iris$Species=="virginica", 1]
iris.dataframe
virginica_sum <- sum(iris.dataframe)
virginica_mean <- mean(virginica_sum)
virginica_mean
virginica_mean <- mean(iris.dataframe)
virginica_mean
rowMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
summary(mtcars)
head(mtcars)
with(mtcars,tapply(mpg,cyl,mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl, mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(split(mtcars$mpg, mtcars$cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars,mtcars$cyl)
apply(mtcars, 2, mean)
lapply((mtcars, mean()))
lapply(mtcars, mean)
?abs
abs(-1 - 6)
summary(cars)
split(cars)
summary(mtcars)
split(mtcars)
split(mtcars,mtcars$cyl)
split(mtcars,mtcars$cyl==4)
?split
plit(mtcars,mtcars$cyl[4])
split(mtcars,mtcars$cyl[4])
filter <- mtcars[mtcars$cyl==4,]
filter
4cyl <- mean(mtcars[mtcars$cyl,4])
4cyl <- mean(mtcars[mtcars$cyl==4,4])
4cyl <- mean(mtcars[mtcars$cyl==4,4])
mtcars[mtcars$cyl==4,]
mtcars[mtcars$cyl==4,2]
mtcars[mtcars$cyl==4,4]
mean(mtcars[mtcars$cyl==4,4])
mean(mtcars[mtcars$cyl==8,4])
abs(mean(mtcars[mtcars$cyl==4,4]) - mean(mtcars[mtcars$cyl==8,4]))
?rnd
?round
round(abs(mean(mtcars[mtcars$cyl==4,4]) - mean(mtcars[mtcars$cyl==8,4]))))
round(abs(mean(mtcars[mtcars$cyl==4,4]) - mean(mtcars[mtcars$cyl==8,4])))
debug(ls)
ls
load()
library(swirl)
rm(list=ls())
swirl()
exit()
info()
bye()
swirl()
info()
play()
nxt()
ls
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = T)
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flags <- sample(1:100,c(0,1), TRUE, prob = c(0.3,0.7))
flags <- sample(1:100,c(0,1), TRUE, prob = c(0.3,0.7)))
flags <- sample(1:100,c(0,1), TRUE, prob = c(0.3,0.7))
flags <- sample(1:100,c(0,1), TRUE, prob = c(0.3, 0.7))
flags <- sample(1:100, c(0,1), TRUE, prob = c(0.3, 0.7))
flips <- sample(1:100, c(0,1), TRUE, prob = c(0.3, 0.7))
flips <- sample(1:100, c(0,1))
flips <- sample(1:100, c(0,1), TRUE)
flips <- sample(1:100, c(0,1), TRUE, prob = c(0.3, 0.7))
flips <- sample(1:100, c(0,1), TRUE, c(0.3, 0.7))
flips <- sample(1:100, c(0,1), TRUE, prob = c(0.3, 0.7))
flips <- sample(1:100, c(0,1), TRUE
flips <- sample(1:100, c(0,1), TRUE)
flips <- sample(1:100, c(0,1), TRUE)
flips <- sample(1:100, c(0,1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips[1])
sum(flips[flips==1])
sum(flips)
?rbinom
rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(100,1,prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
mypois <- replicate(100, rpois(5,10))
mypois <- replicate(100, rpois(5, lambda = 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(c)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$speed, cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
outcome.data <- cbind(c("name",state"))
outcome.data
outcome.data
outcome.data <- cbind(c("name","state"))
outcome.data
outcome.data <- dataframe(cbind(c("name","state")))
outcome.data <- data.frame(cbind(c("name","state")))
outcome.data
outcome.data <- dataframe(, cbind(c("name","state")))
outcome.data <- data.frame(, cbind(c("name","state")))
outcome.data <- data.frame(1, cbind(c("name","state")))
outcome.data
df <- data.frame(Doubles=double(),
Ints=integer(),
Factors=factor(),
Logicals=logical(),
Characters=character(),
stringsAsFactors=FALSE)
df
outcome.data <- data.frame(name=character(), state=character(),stringsAsFactors=FALSE)
outcome.data
lapply(state.abb, print)
lapply(state.abb[1], print)
lapply(state.abb[,1], print)
lapply(state.abb[1:50], print)
lapply(state.abb[1,1:50], print)
lapply(state.abb[1:50,1], print)
state_vector <- c(state.abb)
state_vector
lapply(c(state.abb), print)
state_vector
lapply(state_vector, print)
state_vector <- as.vector(state.abb)
state_vector
outcome.temp.data <- data.frame(1:5)
outcome.temp.data
outcome.temp.data <- data.frame(, 1:5)
outcome.temp.data <- data.frame(1=character(), 2=character(), 3=character(), 4=character(), 5=character())
outcome.temp.data <- data.frame("1"=character(), "2"=character(), "3"=character(), "4"=character(), "5"=character())
outcome.temp.data
?merge
source("rankall.R")
setwd("/Users/mistermaxx/Documents/work/personal/Coursera/R_Programming/Week_4/rprog-data-ProgAssignment3-data")
source("rankall.R")
rankall("heart attack", "best")
source("rankall.R")
rankall("heart attack", "best")
source("rankall.R")
rankall("heart attack", "best")
source("rankall.R")
rankall("heart attack", "best")
rankall("heart attack", "best")
debug()
debug(rankall("heart attack", best))
debug(rankall("heart attack", best))
debug(rankall("heart attack", "best"))
debug(rankall("heart attack", "best"))
source("rankall.R")
debug(rankall("heart attack", "best"))
debugSource('~/Documents/work/personal/Coursera/R_Programming/Week_4/rprog-data-ProgAssignment3-data/rankall.R')
source('~/Documents/work/personal/Coursera/R_Programming/Week_4/rprog-data-ProgAssignment3-data/rankall.R')
# | Week 4 Programming Assignment #3.4
source('~/Documents/work/personal/Coursera/R_Programming/Week_4/rprog-data-ProgAssignment3-data/rankall.R')
source('~/Documents/work/personal/Coursera/R_Programming/Week_4/rprog-data-ProgAssignment3-data/rankall.R')
source('~/Documents/work/personal/Coursera/R_Programming/Week_4/rprog-data-ProgAssignment3-data/rankall.R')
debug()
debug(rankall("pneumonia", "best"))
source("rankall.R")
debug(rankall("pneumonia", "best"))
?lapply
source("rankall.R")
debug(rankall)
rankall("pneumonia", "best")
n
n
str(outcome.temp.data)
?lapply
source("rankall.R")
rankall("pneumonia", "best")
outcome.filedata <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
str(outcome.filedata)
head(outcome.filedata)
?split
?aggregate
outcome.filedata <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
outcome.temp.data <<- subset(outcome.filedata, outcome.filedata$State == state, c(2, 7, 11, 17, 23))
outcome.subset.data <<- outcome.filedata[, c(2, 7, 11, 17, 23)]
?split
split(outcome.subset.data, outcome.subset.data$State)
head(outcome.subset.data)
names(outcome.subset.data) <<- c("name","state","heart attack","heart failure","pneumonia")
names(outcome.subset.data) <- c("name","state","heart attack","heart failure","pneumonia")
head(outcome.subset.data)
outcome.filter <- complete.cases(outcome.subset.data)
outcome.data <- outcome.subset.data[outcome.filter]
outcome.data <- outcome.subset.data[, outcome.filter]
outcome.data <- outcome.subset.data[outcome.filter, ]
head(outcome.data, 25)
tail(outcome.data, 25)
?order
order(outcome.data, outcome.data$state)
outcome.data[ order(outcome.data$state, outcome.data$name)]
outcome.data[ order(outcome.data$state, outcome.data$name), ]
tail(outcome.data, 50)
?unlist
aggregate(outcome.data, by=list(outcome.data$state)
head(outcome.data, 100)
head(outcome.data)
tail(outcome.data)
source("rankall.R")
source("rankall.R")
source("rankall.R")
rankall("pneumonia", "best")
source("rankall.R")
rankall("pneumonia", "best")
debug(rankall)
rankall("pneumonia", "best")
source("rankall.R")
rankall("pneumonia", "best")
rankall("pneumonia", "best")
rankall("pneumonia", "best")
debug(rankall)
rankall("pneumonia", "best")
source("rankall.R")
debug(rankall)
rankall("pneumonia", "best")
source("rankall.R")
debug(rankall)
rankall("pneumonia")
n
?aggregate
?mapply
source("rankall.R")
rankall("pneumonia")
rankall("pneumonia")
debug(rankall)
rankall("pneumonia")
outcome.data[5]
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
str(outcome.data.state)
outcome.data.sorted
source("rankall.R")
rankall("pneumonia")
outcome.data.final <- data.frame(name=character(), state=character(), stringsAsFactors=FALSE)  # return data frame
state_vector <- as.vector(state.abb)
names(outcome.data.final) <- c("name","state")
outcome.filedata <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
outcome.temp.data <- outcome.filedata[, c(2, 7, 11, 17, 23)]
my_column <- as.numeric(switch("pneumonia", "heart attack" = 3, "heart failure" = 4, "pneumonia" = 5))
outcome.subset.data <- outcome.temp.data[, c(1, 2, my_column)]
outcome.filter <- complete.cases(outcome.subset.data)
outcome.data <- outcome.subset.data[outcome.filter, ]
names(outcome.data) <- c("name","state","value")
outcome.data.sorted <- split(outcome.data, outcome.data$state)
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI")
outcome.data.state
outcome.data.sorted
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI")
outcome.data.state
print(outcome.data.state)
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == target.state, c("name","state","value"))
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI", c("name","state","value"))
outcome.data.state
outcome.data.state <- outcome.data.sorted[, outcome.data.sorted$name == target.state]
outcome.data.state <- outcome.data.sorted[, outcome.data.sorted$name == "HI"]
outcome.data.state <- outcome.data.sorted[outcome.data.sorted$name == "HI", ]
?subset
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$name == "HI", c(1:3))
outcome.data.state
head(outcome.data.sorted)
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI", c(1:3))
outcome.data.state
outcome.data.sorted <- split(outcome.data, outcome.data$state)
names(outcome.data.sorted) <- c("name","state","value")
head(outcome.data.sorted)
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == target.state, c(1:3))
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI", c(1:3))
outcome.data.sorted
outcome.data.state
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI", c(1:3))
outcome.data.state
outcome.data.state <- outcome.data.sorted[outcome.data.sorted$state == "HI", ]
class(outcome.data.sorted)
outcome.data.sorted <- as.dataframe(split(outcome.data, outcome.data$state))
outcome.data.sorted <- as.data.frame(split(outcome.data, outcome.data$state))
?sort
?order
outcome.data.sorted <- order(outcome.data, outcome.data$state)
class(outcome.data)
names(outcome.data) <- c("name","state","value")
outcome.data.sorted <- outcome.data[order("state"),]
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI", c(1:3))
outcome.data.state
outcome.data.state <- outcome.data.sorted[outcome.data.sorted$state=="HI", ]
outcome.data.state
outcome.data.sorted
outcome.data
outcome.data.sorted <- outcome.data[order("state"),]
outcome.data.sorted
outcome.data.sorted <- outcome.data[, order("state")]
outcome.data.sorted
class(outcome.data.sorted)
class(outcome.data)
outcome.data.sorted <- outcome.data[order(outcome.data[,2]), ]
class(outcome.data)
outcome.data
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == target.state, c(1:3))
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI", c(1:3))
outcome.data.state
outcome.data.state <- outcome.data.state[order(outcome.data.state[, 3]), ]
outcome.data.state
outcome.data.state[1]
outcome.data.state[1, c(1:2)]
source("rankall.R")
rankall("pneumonia")
class(outcome.data.final)
outcome.data.state <- subset(outcome.data.sorted, outcome.data.sorted$state == "HI", c(1:3))
outcome.data.state
outcome.data.state <- outcome.data.state[num, c(1:2)]
outcome.data.state <- outcome.data.state[1, c(1:2)]
outcome.data.state
source("rankall.R")
rankall("pneumonia")
?lapply
source("rankall.R")
rankall("pneumonia")
state_vector
source("rankall.R")
rankall("pneumonia")
outcome.data.final <- sapply(get.state.hospital.data, state_vector)
outcome.data.final <- lapply(get.state.hospital.data, c("AK","AL","AR","AR","CA"))
outcome.data.final <- lapply(c("AK","AL","AR","AR","CA"), get.state.hospital.data)
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
?lapply
?subset
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
?stack
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
class(outcome.data.final)
source("rankall.R")
rankall("pneumonia")
?as.matrix
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
?levels
levels(outcome.data.final)
?factor
outcome.data.final[[1]]
outcome.data.final[1,]
outcome.data.final[2,]
outcome.data.final[[1],]
droplevels(outcome.data.final)
outcome.data.final
source("rankall.R")
rankall("pneumonia")
source("rankall.R")
rankall("pneumonia")
class(outcome.data.final)
